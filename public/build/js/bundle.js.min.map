{"version":3,"sources":["clientes.js","usuarios.js"],"names":["dataTable","dataTableInit","dataTableOptions","destroy","language","url","dom","buttons","extend","text","titleAttr","className","columnDefs","orderable","targets","async","initDataTable","response","fetch","clientes","tableBody","document","getElementById","innerHTML","forEach","cliente","index","row","createElement","nombre","apellidos","correo","telefono","documento_identidad","fecha_nacimiento","id","appendChild","addEventListener","handleClientActions","renderClientes","json","error","console","listarClientes","$","DataTable","e","target","classList","contains","clienteId","getAttribute","actualizarCliente","Swal","fire","title","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","isConfirmed","datos","FormData","append","method","body","resultado","mostrarAlerta","titulo","mensaje","tipo","eliminarCliente","querySelector","nuevoCliente","value","trim","Object","entries","key","modal","dataTableOption","roles","1","2","3","estatus","0","usuarios","usuario","apellido","direccion","email","rol_id","fecha_creacion","log","listarUsers","window"],"mappings":"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","file":"bundle.js","sourcesContent":["(function () {\r\n    let dataTable;\r\n    let dataTableInit = false;\r\n\r\n    // Configuración inicial de DataTable con opciones y botones personalizados\r\n    const dataTableOptions = {\r\n        destroy: true,\r\n        language: {\r\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\r\n        },\r\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f><\"d-flex justify-content-end col-sm-6\"B>>' +\r\n             '<\"row\"<\"col-sm-12\"tr>>' +\r\n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\r\n        buttons: [\r\n            {\r\n                extend: 'excelHtml5',\r\n                text: '<i class=\"fa-solid fa-file-excel\"></i>',\r\n                titleAttr: 'Exportar a Excel',\r\n                className: 'btn btn-success'\r\n            },\r\n            {\r\n                extend: 'pdfHtml5',\r\n                text: '<i class=\"fa-solid fa-file-pdf\"></i>',\r\n                titleAttr: 'Exportar a PDF',\r\n                className: 'btn btn-danger'\r\n            },\r\n            {\r\n                extend: 'csvHtml5',\r\n                text: '<i class=\"fa-solid fa-file-csv\"></i>',\r\n                titleAttr: 'Exportar a CSV',\r\n                className: 'btn btn-primary'\r\n            },\r\n            {\r\n                extend: 'print',\r\n                text: '<i class=\"fa-solid fa-print\"></i>',\r\n                titleAttr: 'Imprimir',\r\n                className: 'btn btn-info'\r\n            }\r\n        ],\r\n        columnDefs: [\r\n            { orderable: false, targets: [3, 4, 7] }  // Desactiva la ordenación en las columnas especificadas\r\n        ]\r\n    };\r\n\r\n    // Inicializa la DataTable al cargar el documento\r\n    initDataTable();\r\n\r\n    /**\r\n     * Inicializa la DataTable y la carga con datos.\r\n     */\r\n    async function initDataTable() {\r\n        if (dataTableInit) {\r\n            dataTable.destroy();  // Si ya existe una instancia de DataTable, la destruye para evitar duplicados\r\n        }\r\n        \r\n        await listarClientes();  // Carga los datos de clientes\r\n\r\n        dataTable = $(\"#datatable_clients\").DataTable(dataTableOptions);\r\n        dataTableInit = true;\r\n    }\r\n\r\n    /**\r\n     * Recupera y muestra la lista de clientes en la tabla.\r\n     */\r\n    async function listarClientes() {\r\n        try {\r\n            const url = 'http://localhost:3000/api/clientes/listar';\r\n            const response = await fetch(url);\r\n            const clientes = await response.json();\r\n\r\n            renderClientes(clientes);  // Llama a la función para mostrar los clientes en la tabla\r\n        } catch (error) {\r\n            console.error('Error al listar clientes:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rinde la lista de clientes en el cuerpo de la tabla.\r\n     * @param {Array} clientes - Lista de clientes obtenida del servidor.\r\n     */\r\n    function renderClientes(clientes) {\r\n        const tableBody = document.getElementById('tableBody_clients');\r\n        tableBody.innerHTML = '';  // Limpia el contenido previo\r\n\r\n        clientes.forEach((cliente, index) => {\r\n            const row = document.createElement('tr');\r\n            row.innerHTML = `\r\n                <td>${index + 1}</td> \r\n                <td>${cliente.nombre}</td>\r\n                <td>${cliente.apellidos}</td>\r\n                <td>${cliente.correo}</td>\r\n                <td>${cliente.telefono}</td>\r\n                <td>${cliente.documento_identidad}</td>\r\n                <td>${cliente.fecha_nacimiento}</td>\r\n                <td>\r\n                    <button class=\"btn btn-sm btn-primary\" data-toggle=\"modal\" data-target=\"#editarClienteModal${cliente.id}\">\r\n                        <i class=\"fa-solid fa-pen\"></i>\r\n                    </button>\r\n                    <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\r\n                        <i class=\"fa-solid fa-trash\"></i>\r\n                    </button>\r\n                </td>\r\n            `;\r\n            tableBody.appendChild(row);\r\n        });\r\n\r\n        // Agrega eventos para los botones de actualización y eliminación\r\n        tableBody.addEventListener('click', handleClientActions);\r\n    }\r\n\r\n    /**\r\n     * Maneja las acciones de edición y eliminación de clientes.\r\n     * @param {Event} e - Evento de clic.\r\n     */\r\n    function handleClientActions(e) {\r\n        const target = e.target;\r\n        if (target.classList.contains('btn-actualizarCliente')) {\r\n            const clienteId = target.getAttribute('data-id');\r\n            actualizarCliente(clienteId);\r\n        } else if (target.classList.contains('btn-eliminarCliente')) {\r\n            const clienteId = target.getAttribute('data-id');\r\n            confirmarEliminacion(clienteId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Confirma y elimina un cliente de la lista.\r\n     * @param {number} id - ID del cliente a eliminar.\r\n     */\r\n    function confirmarEliminacion(id) {\r\n        Swal.fire({\r\n            title: '¿Estás seguro?',\r\n            text: \"Esta acción no se puede deshacer.\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#d33',\r\n            cancelButtonColor: '#3085d6',\r\n            confirmButtonText: 'Sí, eliminar',\r\n            cancelButtonText: 'Cancelar'\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                await eliminarCliente(id);\r\n                await initDataTable();  // Refresca la tabla tras la eliminación\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Envía una solicitud para eliminar un cliente.\r\n     * @param {number} id - ID del cliente a eliminar.\r\n     */\r\n    async function eliminarCliente(id) {\r\n        try {\r\n            const datos = new FormData();\r\n            datos.append('id', id);\r\n            const url = 'http://localhost:3000/api/clientes/eliminar';\r\n            const response = await fetch(url, { method: 'POST', body: datos });\r\n            const resultado = await response.json();\r\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\r\n        } catch (error) {\r\n            console.error('Error al eliminar cliente:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Muestra una alerta utilizando SweetAlert.\r\n     * @param {string} titulo - Título de la alerta.\r\n     * @param {string} mensaje - Mensaje de la alerta.\r\n     * @param {string} tipo - Tipo de alerta (success, error, etc.).\r\n     */\r\n    function mostrarAlerta(titulo, mensaje, tipo) {\r\n        Swal.fire({\r\n            icon: tipo,\r\n            title: titulo,\r\n            text: mensaje\r\n        });\r\n    }\r\n\r\n    // Agregar cliente - Evento de botón de añadir cliente\r\n    document.querySelector('.btnAgregarCliente').addEventListener('click', agregarCliente);\r\n\r\n    /**\r\n     * Agrega un nuevo cliente a la lista.\r\n     */\r\n    async function agregarCliente() {\r\n        const nuevoCliente = {\r\n            nombre: document.getElementById('nombre').value.trim(),\r\n            apellidos: document.getElementById('apellidos').value.trim(),\r\n            correo: document.getElementById('correo').value.trim(),\r\n            telefono: document.getElementById('telefono').value.trim(),\r\n            documento_identidad: document.getElementById('documento_identidad').value.trim(),\r\n            fecha_nacimiento: document.getElementById('fecha_nacimiento').value\r\n        };\r\n\r\n        if (!nuevoCliente.nombre || !nuevoCliente.apellidos || !nuevoCliente.correo) {\r\n            mostrarAlerta('Error', 'Todos los campos son obligatorios', 'error');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const datos = new FormData();\r\n            Object.entries(nuevoCliente).forEach(([key, value]) => datos.append(key, value));\r\n            const url = 'http://localhost:3000/api/clientes/crear';\r\n            const response = await fetch(url, { method: 'POST', body: datos });\r\n            const resultado = await response.json();\r\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\r\n            $('#clientesModal').modal('hide');\r\n            await initDataTable();\r\n        } catch (error) {\r\n            console.error('Error al agregar cliente:', error);\r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    let dataTable;\r\n    let dataTableInit = false;\r\n\r\n    // Opciones de DataTables\r\n    const dataTableOption = {\r\n        destroy: true,\r\n        language: {\r\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\r\n        },\r\n        columnDefs: [\r\n            { orderable: false, targets: [3, 4, 8] }  // Desactiva la ordenación en la columna 8 (índice 7)\r\n        ]\r\n    };\r\n\r\n\r\n    // Diccionarios para roles y estatus\r\n    const roles = {\r\n        1: 'Administrador',\r\n        2: 'Empleado General',\r\n        3: 'Limpieza'\r\n    };\r\n\r\n    const estatus = {\r\n        1: 'Activo',\r\n        0: 'Inactivo'\r\n    };\r\n\r\n    // Función para inicializar la DataTable\r\n    async function initDataTable() {\r\n        if (dataTableInit) {\r\n            dataTable.destroy();  // Destruye la DataTable si ya existe\r\n        }\r\n\r\n        await listarUsers();  // Llama a la función para listar usuarios\r\n\r\n        // Inicializa la DataTable\r\n        dataTable = $(\"#datatable_users\").DataTable(dataTableOption);\r\n\r\n        dataTableInit = true;  // Marca que la DataTable fue inicializada\r\n    }\r\n\r\n    // Función para listar los usuarios\r\n    async function listarUsers() {\r\n        try {\r\n            const url = 'http://localhost:3000/api/usuarios/listar';\r\n            const resultado = await fetch(url);\r\n            const usuarios = await resultado.json();\r\n\r\n            // Selecciona el cuerpo de la tabla\r\n            const tableBody = document.getElementById('tableBody_users');\r\n\r\n            // Limpia el contenido del tbody antes de agregar nuevas filas\r\n            tableBody.innerHTML = '';\r\n\r\n            // Recorre los usuarios y genera las filas de la tabla\r\n            usuarios.forEach((usuario, index) => {\r\n                // Crea una nueva fila\r\n                const row = document.createElement('tr');\r\n\r\n                // Agrega celdas (td) a la fila con la información que quieres mostrar\r\n                row.innerHTML = `\r\n                    <td>${index + 1}</td> \r\n                    <td>${usuario.nombre}</td>\r\n                    <td>${usuario.apellido}</td>\r\n                    <td>${usuario.direccion}</td>\r\n                    <td>${usuario.email}</td>\r\n                    <td>${roles[usuario.rol_id]}</td> <!-- Muestra el rol legible -->\r\n                    <td>${estatus[usuario.estatus]}</td> <!-- Muestra el estatus legible -->\r\n                    <td>${usuario.fecha_creacion}</td>\r\n                    <td>\r\n                        <!-- Botón de editar -->\r\n                        <button class=\"btn btn-sm btn-primary\">\r\n                            <i class=\"fa-solid fa-pen\"></i>\r\n                        </button>\r\n\r\n                        <!-- Formulario para eliminar -->\r\n                        <form method=\"POST\" action=\"/admin/usuarios/eliminar\" class=\"d-inline\">\r\n                            <input type=\"hidden\" name=\"id\" value=\"${usuario.id}\">\r\n                            <button class=\"btn btn-sm btn-danger\" type=\"submit\">\r\n                                <i class=\"fa-solid fa-trash\"></i>\r\n                            </button>\r\n                        </form>\r\n                    </td>\r\n                `;\r\n\r\n                // Agrega la fila a la tabla\r\n                tableBody.appendChild(row);\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // Ejecuta la función cuando la ventana cargue\r\n    window.addEventListener('load', async () => {\r\n        await initDataTable();\r\n    });\r\n})();\r\n"]}